#!/bin/sh -ue
fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2; exit "$rc"; }
nonfatal() { printf %s\\n "${0##*/}: $*" >&2; }
get_fd() {
    local x
    set -- ${MAKEFLAGS-}
    fd=
    for x; do
        case "$x" in
            --jobserver-fds=?*,?*|--jobserver-auth=?*,?*)
                fd="${x#*,}"
                ;;
            esac
        done
    [ -n "$fd" ] || fatal 64 'jobserver not running!'
    }
get_fd
# always release if possible
if [ -e /dev/fd ]; then
    # workaround: dash, zsh, and probably more do not allow >&X when X > 9
    trap 'printf x >/dev/fd/"$fd"' exit
else
    release() {
        printf x >&"$fd" || nonfatal "failed to release token"
        }
    trap release exit

keep_stdin=false
handle_option() {
    case "$1" in
        keep-stdin)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep_stdin=true
            ;;
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done

[ $# != 0 ] || fatal 64 'missing CMD argument'
$keep_stdin || exec </dev/null
command "$@"
