#!/bin/sh -ue

fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2; exit "$rc"; }
nonfatal() { printf %s\\n "${0##*/}: $*" >&2; }
is_digits() { local x; for x; do case "$x" in *[!0-9]*|'') return 1 ;; *) ;; esac done; }

#TODO: is this a sensible default? seems better than 1
# will cause unnecessary contention if CPUs < 4
default_slots=4
max_slots=1000

reuse=true
slots=
float=
debug=false
handle_option() {
    case "$1" in
        new)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            reuse=false
            ;;
        slots)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            if [ 0 = "$2" ]; then
                fatal 64 'slots cannot be zero'
            fi
            if [ "$2" -gt $max_slots ]; then
                nonfatal "capping slots at $max_slots (instead of $2)"
                slots="$max_slots"
            else
                slots="$2"
                fi
            ;;
        no-float)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            float=--no-float
            ;;
        debug)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            debug=true
            ;;
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done
[ $# != 0 ] || fatal 64 'missing CMD argument'

jobserver="$(readlink -f "$(dirname "$0")")/jobserver"
if $reuse && "$jobserver-started"; then
    [ -z "$slots" ] || nonfatal "ignoring explicit slots and reusing existing pool"
    exec "$@"
    fi
if [ -z "$slots" ]; then
    if which nproc >/dev/null 2>&1; then
        # available processors
        # relevant? https://unix.stackexchange.com/q/218074
        slots="$(nproc)" || {
            nonfatal "using $default_slots slots because nproc exited $?"
            slots="$default_slots"
            }
    elif which sysctl >/dev/null 2>&1; then
        # FreeBSD; total processors
        slots="$(sysctl -n hw.ncpu)" || {
            nonfatal "using $default_slots slots because sysctl exited $?"
            slots="$default_slots"
            }
    else
        nonfatal "using $default_slots slots because do not know how to determine default"
        slots="$default_slots"
        fi
    if is_digits "$slots" && [ 0 != "$slots" ]; then
        :
    else
        nonfatal "using $default_slots instead of invalid slots: ${slots-(empty)}"
        slots="$default_slots"
        fi
    fi
if $debug; then
    set -- sh -c '"$0" --debug; exec "$@"' "$jobserver-started" "$@"
    fi
JOBSERVER="$jobserver"
export JOBSERVER
exec "$(dirname "$jobserver")/_float" $float --var=JOBSERVER_FDS "$slots" \
    "$(dirname "$jobserver")/_init2" "$@"
